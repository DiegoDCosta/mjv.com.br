<?php
    global $VISUAL_COMPOSER_EXTENSIONS;
	
    $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_VisualComposer_Element = array(
		"name"                      	=> __( "TS Icon Wings Button", "ts_visual_composer_extend" ),
		"base"                      	=> "TS_VCSC_Icon_Wings_Button",
		"icon" 	                    	=> "ts-composer-element-icon-icon-wing-button",
		"class"                     	=> "",
		"category"                  	=> __( "VC Extensions", "ts_visual_composer_extend" ),
		"description"               	=> __("Place a icon button with wings", "ts_visual_composer_extend"),
		//"js_view"     				=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_EditorLivePreview == "true" ? "TS_VCSC_IconDualButtonsViewCustom" : ""),
		"admin_enqueue_js"            	=> "",
		"admin_enqueue_css"           	=> "",
		"params"                    	=> array(
			// General Settings
			array(
				"type"              	=> "seperator",
				"param_name"        	=> "seperator_1",
				"seperator"             => "General Settings",
			),
			array(
				"type"              	=> "dropdown",
				"heading"           	=> __( "Button Scope", "ts_visual_composer_extend" ),
				"param_name"        	=> "button_scope",
				"width"             	=> 300,
				"value"             	=> array(
					__( 'Single Link', "ts_visual_composer_extend" )      	=> "single",
					__( 'Dual Links', "ts_visual_composer_extend" )			=> "dual",
					__( 'Triple Links', "ts_visual_composer_extend" )  		=> "triple",
				),
				"description"       	=> __( "Select how many links you want to assign to the button element.", "ts_visual_composer_extend" ),
			),
			array(
				"type"              	=> "dropdown",
				"heading"           	=> __( "Button Align", "ts_visual_composer_extend" ),
				"param_name"        	=> "button_align",
				"width"             	=> 300,
				"value"             	=> array(
					__( 'Center', "ts_visual_composer_extend" )      	=> "ts-wings-buttons-center",
					__( 'Left', "ts_visual_composer_extend" )			=> "ts-wings-buttons-left",
					__( 'Right', "ts_visual_composer_extend" )  		=> "ts-wings-buttons-right",
				),
				"description"       	=> __( "Select how the wings button should be aligned.", "ts_visual_composer_extend" ),
			),
			array(
				"type"                  => "nouislider",
				"heading"               => __( "Button Width", "ts_visual_composer_extend" ),
				"param_name"            => "button_width",
				"value"                 => "100",
				"min"                   => "0",
				"max"                   => "100",
				"step"                  => "1",
				"unit"                  => '%',
				"description"       	=> __( "Define the button width in percent (responsive).", "ts_visual_composer_extend" ),
			),
			array(
				"type"					=> "dropdown",
				"class"					=> "",
				"heading"				=> __( "Radius: Main", "ts_visual_composer_extend" ),
				"param_name"			=> "radius_button",
				"value"					=> array(
					__( "None", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-none",
					__( "Large", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-large",
					__( "Medium", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-medium",
					__( "Small", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-small",
				),
				"description"			=> __( "Select the border radius that should be applied to the wings button.", "ts_visual_composer_extend" ),
			),
			array(
				"type"					=> "dropdown",
				"class"					=> "",
				"heading"				=> __( "Radius: Wings", "ts_visual_composer_extend" ),
				"param_name"			=> "radius_button",
				"value"					=> array(
					__( "None", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-none",
					__( "Large", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-large",
					__( "Medium", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-medium",
					__( "Small", "ts_visual_composer_extend" )			=> "ts-wings-buttons-radius-small",
				),
				"description"			=> __( "Select the border radius that should be applied to the wings button.", "ts_visual_composer_extend" ),
			),
			// Link Settings #1
			array(
				"type"              	=> "seperator",
				"param_name"        	=> "seperator_2",
				"seperator"            	=> "Main Button Settings",
				"group" 				=> "Main Button",
			),
			array(
				"type"                  => "switch_button",
				"heading"			    => __( 'Main Button: Page Navigation', "ts_visual_composer_extend" ),
				"param_name"		    => "scroll_navigate1",
				"value"                 => "false",
				"description"		    => __( "Switch the toggle if you want to use button #1 to navigate to another section on the same page.", "ts_visual_composer_extend" ),
				"dependency"			=> array( 'element' => "button_scope", 'value' => array('single', 'triple') ),
				"group" 				=> "Main Button",
			),
			array(
				"type" 					=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_ParameterLinkPicker['enabled'] == "false" ? "vc_link" : "advancedlinks"),
				"heading" 				=> __("Main Button: Link + Title", "ts_visual_composer_extend"),
				"param_name" 			=> "button_link1",
				"description" 			=> __("Provide a link to another site/page for link #1.", "ts_visual_composer_extend"),
				"dependency"    		=> array( 'element' => 'scroll_navigate1', 'value' => "false" ),
				"group" 				=> "Main Button",
			),
			array(
				"type"                  => "textfield",
				"heading"               => __( "Main Button: Page Scroll Target", "ts_visual_composer_extend" ),
				"param_name"            => "scroll_target1",
				"value"                 => "",
				"description"           => __( "Enter the unique ID for the page section you want to scroll to.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate1", 'value' => 'true' ),
				"group" 				=> "Main Button",
			),
			array(
				"type" 					=> "devicetype_selectors",
				"heading"           	=> __( "Main Button: Device Type Scroll Offset", "ts_visual_composer_extend" ),
				"param_name"        	=> "scroll_offset1",
				"unit"  				=> "px",
				"collapsed"				=> "true",
				"devices" 				=> array(
					"Desktop"           		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
					"Tablet"            		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
					"Mobile"            		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
				),
				"value"					=> "desktop:0px;tablet:0px;mobile:0px",
				"description"			=> __( "Define an additional scroll offset to account for menu bars and other top fixed elements.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate1", 'value' => 'true' ),
				"group" 				=> "Main Button",
			),
			array(
				"type"					=> "nouislider",
				"heading"				=> __( "Main Button: Page Scroll Speed", "ts_visual_composer_extend" ),
				"param_name"			=> "scroll_speed1",
				"value"					=> "2000",
				"min"					=> "500",
				"max"					=> "10000",
				"step"					=> "100",
				"unit"					=> 'ms',
				"description"			=> __( "Define the speed that should be used to scroll to the section.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate1", 'value' => 'true' ),
				"group" 				=> "Main Button",
			),							
			array(
				"type"                 	=> "dropdown",
				"heading"               => __( "Main Button: Page Scroll Easing", "ts_visual_composer_extend" ),
				"param_name"            => "scroll_effect1",
				"edit_field_class"		=> "vc_col-sm-6 vc_column",
				"width"                 => 150,
				"value" 				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_CSS_Easings_Array,
				"description"           => __( "Select the easing animation that should be applied to the page scroll.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate1", 'value' => 'true' ),
				"group" 				=> "Main Button",
			),
			array(
				"type"                  => "switch_button",
				"heading"			    => __( 'Main Button: Add Target as Hashtag', "ts_visual_composer_extend" ),
				"param_name"		    => "scroll_hashtag1",
				"edit_field_class"		=> "vc_col-sm-6 vc_column",
				"value"                 => "false",
				"description"		    => __( "Switch the toggle if you want to add the scroll target to the browser URL via hashtag.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate1", 'value' => 'true' ),
				"group" 				=> "Main Button",
			),
			array(
				"type"              	=> "textfield",
				"heading"           	=> __( "Main Button: Text", "ts_visual_composer_extend" ),
				"param_name"        	=> "button_text1",
				"value"             	=> "Read More 1",
				"description"       	=> __( "Enter a text for link #1.", "ts_visual_composer_extend" ),
				"group" 				=> "Main Button",
			),
			array(
				'type' 					=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorType,
				'heading' 				=> __( 'Main Button: Icon', 'ts_visual_composer_extend' ),
				'param_name' 			=> 'button_icon1',
				'value'					=> '',
				'source'				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorValue,
				'settings' 				=> array(
					'emptyIcon' 				=> true,
					'type' 						=> 'extensions',
					'iconsPerPage' 				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorPager,
					'source' 					=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorSource,
				),
				"description"       	=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_EditorVisualSelector == "true" ? __( "Select the icon you want to display with this link.", "ts_visual_composer_extend" ) : $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorString),
				"group" 				=> "Main Button",
			),
			// Link Settings #2
			array(
				"type"              	=> "seperator",
				"param_name"        	=> "seperator_3",
				"seperator"            	=> "Top Wing Settings",
				"group" 				=> "Top Wing",
			),
			array(
				"type"                  => "switch_button",
				"heading"			    => __( 'Top Wing: Use for Page Navigation', "ts_visual_composer_extend" ),
				"param_name"		    => "scroll_navigate2",
				"value"                 => "false",
				"description"		    => __( "Switch the toggle if you want to use button #1 to navigate to another section on the same page.", "ts_visual_composer_extend" ),
				"dependency"			=> array( 'element' => "button_scope", 'value' => array('dual', 'triple') ),
				"group" 				=> "Top Wing",
			),
			array(
				"type" 					=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_ParameterLinkPicker['enabled'] == "false" ? "vc_link" : "advancedlinks"),
				"heading" 				=> __("Top Wing: Link + Title", "ts_visual_composer_extend"),
				"param_name" 			=> "button_link2",
				"description" 			=> __("Provide a link to another site/page for link #2.", "ts_visual_composer_extend"),
				"dependency"    		=> array( 'element' => 'scroll_navigate2', 'value' => "false" ),
				"group" 				=> "Top Wing",
			),
			array(
				"type"                  => "textfield",
				"heading"               => __( "Top Wing: Page Scroll Target", "ts_visual_composer_extend" ),
				"param_name"            => "scroll_target2",
				"value"                 => "",
				"description"           => __( "Enter the unique ID for the page section you want to scroll to.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate2", 'value' => 'true' ),
				"group" 				=> "Top Wing",
			),
			array(
				"type" 					=> "devicetype_selectors",
				"heading"           	=> __( "Top Wing: Device Type Scroll Offset", "ts_visual_composer_extend" ),
				"param_name"        	=> "scroll_offset2",
				"unit"  				=> "px",
				"collapsed"				=> "true",
				"devices" 				=> array(
					"Desktop"           		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
					"Tablet"            		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
					"Mobile"            		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
				),
				"value"					=> "desktop:0px;tablet:0px;mobile:0px",
				"description"			=> __( "Define an additional scroll offset to account for menu bars and other top fixed elements.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate2", 'value' => 'true' ),
				"group" 				=> "Top Wing",
			),
			array(
				"type"					=> "nouislider",
				"heading"				=> __( "Top Wing: Page Scroll Speed", "ts_visual_composer_extend" ),
				"param_name"			=> "scroll_speed2",
				"value"					=> "2000",
				"min"					=> "500",
				"max"					=> "10000",
				"step"					=> "100",
				"unit"					=> 'ms',
				"description"			=> __( "Define the speed that should be used to scroll to the section.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate2", 'value' => 'true' ),
				"group" 				=> "Top Wing",
			),							
			array(
				"type"                 	=> "dropdown",
				"heading"               => __( "Top Wing: Page Scroll Easing", "ts_visual_composer_extend" ),
				"param_name"            => "scroll_effect2",
				"edit_field_class"		=> "vc_col-sm-6 vc_column",
				"width"                 => 150,
				"value" 				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_CSS_Easings_Array,
				"description"           => __( "Select the easing animation that should be applied to the page scroll.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate2", 'value' => 'true' ),
				"group" 				=> "Top Wing",
			),
			array(
				"type"                  => "switch_button",
				"heading"			    => __( 'Top Wing: Add Target as Hashtag', "ts_visual_composer_extend" ),
				"param_name"		    => "scroll_hashtag2",
				"edit_field_class"		=> "vc_col-sm-6 vc_column",
				"value"                 => "false",
				"description"		    => __( "Switch the toggle if you want to add the scroll target to the browser URL via hashtag.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate2", 'value' => 'true' ),
				"group" 				=> "Top Wing",
			),
			array(
				"type"              	=> "textfield",
				"heading"           	=> __( "Top Wing: Text", "ts_visual_composer_extend" ),
				"param_name"        	=> "button_text2",
				"value"             	=> "Read More 2",
				"description"       	=> __( "Enter a text for the top wing.", "ts_visual_composer_extend" ),
				"group" 				=> "Top Wing",
			),
			array(
				'type' 					=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorType,
				'heading' 				=> __( 'Top Wing: Icon', 'ts_visual_composer_extend' ),
				'param_name' 			=> 'button_icon2',
				'value'					=> '',
				'source'				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorValue,
				'settings' 				=> array(
					'emptyIcon' 				=> true,
					'type' 						=> 'extensions',
					'iconsPerPage' 				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorPager,
					'source' 					=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorSource,
				),
				"description"       	=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_EditorVisualSelector == "true" ? __( "Select the icon you want to display with the top wing text.", "ts_visual_composer_extend" ) : $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorString),
				"group" 				=> "Top Wing",
			),
			array(
				"type"              	=> "textarea_raw_html",
				"heading"           	=> __( "Top Wing: Tooltip Content", "ts_visual_composer_extend" ),
				"param_name"        	=> "tooltip_content2",
				"value"             	=> base64_encode(""),
				"description"      	 	=> __( "Enter the tooltip content for the top wing here; HTML code can be used.", "ts_visual_composer_extend" ),
				"dependency"			=> array( 'element' => "button_scope", 'value' => array('dual', 'triple') ),
				"group" 				=> "Top Wing",
			),
			// Link Settings #3
			array(
				"type"              	=> "seperator",
				"param_name"        	=> "seperator_5",
				"seperator"            	=> "Bottom Wing Settings",
				"group" 				=> "Bottom Wing",
			),
			array(
				"type"                  => "switch_button",
				"heading"			    => __( 'Bottom Wing: Use for Page Navigation', "ts_visual_composer_extend" ),
				"param_name"		    => "scroll_navigate3",
				"value"                 => "false",
				"description"		    => __( "Switch the toggle if you want to use button #1 to navigate to another section on the same page.", "ts_visual_composer_extend" ),
				"dependency"			=> array( 'element' => "button_scope", 'value' => array('dual', 'triple') ),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type" 					=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_ParameterLinkPicker['enabled'] == "false" ? "vc_link" : "advancedlinks"),
				"heading" 				=> __("Bottom Wing: Link + Title", "ts_visual_composer_extend"),
				"param_name" 			=> "button_link3",
				"description" 			=> __("Provide a link to another site/page for link #3.", "ts_visual_composer_extend"),
				"dependency"    		=> array( 'element' => 'scroll_navigate3', 'value' => "false" ),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type"                  => "textfield",
				"heading"               => __( "Bottom Wing: Page Scroll Target", "ts_visual_composer_extend" ),
				"param_name"            => "scroll_target3",
				"value"                 => "",
				"description"           => __( "Enter the unique ID for the page section you want to scroll to.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate3", 'value' => 'true' ),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type" 					=> "devicetype_selectors",
				"heading"           	=> __( "Bottom Wing: Device Type Scroll Offset", "ts_visual_composer_extend" ),
				"param_name"        	=> "scroll_offset3",
				"unit"  				=> "px",
				"collapsed"				=> "true",
				"devices" 				=> array(
					"Desktop"           		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
					"Tablet"            		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
					"Mobile"            		=> array("default" => 0, "min" => 0, "max" => 250, "step" => 1),
				),
				"value"					=> "desktop:0px;tablet:0px;mobile:0px",
				"description"			=> __( "Define an additional scroll offset to account for menu bars and other top fixed elements.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate3", 'value' => 'true' ),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type"					=> "nouislider",
				"heading"				=> __( "Bottom Wing: Page Scroll Speed", "ts_visual_composer_extend" ),
				"param_name"			=> "scroll_speed3",
				"value"					=> "2000",
				"min"					=> "500",
				"max"					=> "10000",
				"step"					=> "100",
				"unit"					=> 'ms',
				"description"			=> __( "Define the speed that should be used to scroll to the section.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate3", 'value' => 'true' ),
				"group" 				=> "Bottom Wing",
			),							
			array(
				"type"                 	=> "dropdown",
				"heading"               => __( "Bottom Wing: Page Scroll Easing", "ts_visual_composer_extend" ),
				"param_name"            => "scroll_effect3",
				"edit_field_class"		=> "vc_col-sm-6 vc_column",
				"width"                 => 150,
				"value" 				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_CSS_Easings_Array,
				"description"           => __( "Select the easing animation that should be applied to the page scroll.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate3", 'value' => 'true' ),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type"                  => "switch_button",
				"heading"			    => __( 'Bottom Wing: Add Target as Hashtag', "ts_visual_composer_extend" ),
				"param_name"		    => "scroll_hashtag3",
				"edit_field_class"		=> "vc_col-sm-6 vc_column",
				"value"                 => "false",
				"description"		    => __( "Switch the toggle if you want to add the scroll target to the browser URL via hashtag.", "ts_visual_composer_extend" ),
				"dependency"            => array( 'element' => "scroll_navigate3", 'value' => 'true' ),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type"              	=> "textfield",
				"heading"           	=> __( "Bottom Wing: Text", "ts_visual_composer_extend" ),
				"param_name"        	=> "button_text3",
				"value"             	=> "Read More 3",
				"description"       	=> __( "Enter a text for the bottom wing.", "ts_visual_composer_extend" ),
				"group" 				=> "Bottom Wing",
			),
			array(
				'type' 					=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorType,
				'heading' 				=> __( 'Bottom Wing: Icon', 'ts_visual_composer_extend' ),
				'param_name' 			=> 'button_icon3',
				'value'					=> '',
				'source'				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorValue,
				'settings' 				=> array(
					'emptyIcon' 				=> true,
					'type' 						=> 'extensions',
					'iconsPerPage' 				=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorPager,
					'source' 					=> $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorSource,
				),
				"description"       	=> ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_EditorVisualSelector == "true" ? __( "Select the icon you want to display with the bottom wing text.", "ts_visual_composer_extend" ) : $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_IconSelectorString),
				"group" 				=> "Bottom Wing",
			),
			array(
				"type"              	=> "textarea_raw_html",
				"heading"           	=> __( "Bottom Wing: Tooltip Content", "ts_visual_composer_extend" ),
				"param_name"        	=> "tooltip_content3",
				"value"             	=> base64_encode(""),
				"description"      	 	=> __( "Enter the tooltip content for the bottom wing here; HTML code can be used.", "ts_visual_composer_extend" ),
				"dependency"			=> array( 'element' => "button_scope", 'value' => array('dual', 'triple') ),
				"group" 				=> "Bottom Wing",
			),
			// Tooltip Settings
			array(
				"type"              	=> "seperator",
				"param_name"        	=> "seperator_6",
				"seperator"            	=> "Tooltip Settings",
				"group" 				=> "Tooltip Settings",
			),
			array(
				"type"					=> "dropdown",
				"class"					=> "",
				"heading"				=> __( "Tooltip Position", "ts_visual_composer_extend" ),
				"param_name"			=> "tooltip_position",
				"value"					=> array(
					__( "Right", "ts_visual_composer_extend" )                          => "ts-simptip-position-right",
					__( "Left", "ts_visual_composer_extend" )                           => "ts-simptip-position-left",
					__( "Top", "ts_visual_composer_extend" )                            => "ts-simptip-position-top",
					__( "Bottom", "ts_visual_composer_extend" )                         => "ts-simptip-position-bottom",
				),
				"description"			=> __( "Select the tooltip position in relation to the image.", "ts_visual_composer_extend" ),
				"group" 				=> "Tooltip Settings",
			),
			array(
				"type"					=> "dropdown",
				"class"					=> "",
				"heading"				=> __( "Tooltip Style", "ts_visual_composer_extend" ),
				"param_name"			=> "tooltip_style",
				"value"             	=> array(
					__( "Black", "ts_visual_composer_extend" )                          => "",
					__( "Gray", "ts_visual_composer_extend" )                           => "ts-simptip-style-gray",
					__( "Green", "ts_visual_composer_extend" )                          => "ts-simptip-style-green",
					__( "Blue", "ts_visual_composer_extend" )                           => "ts-simptip-style-blue",
					__( "Red", "ts_visual_composer_extend" )                            => "ts-simptip-style-red",
					__( "Orange", "ts_visual_composer_extend" )                         => "ts-simptip-style-orange",
					__( "Yellow", "ts_visual_composer_extend" )                         => "ts-simptip-style-yellow",
					__( "Purple", "ts_visual_composer_extend" )                         => "ts-simptip-style-purple",
					__( "Pink", "ts_visual_composer_extend" )                           => "ts-simptip-style-pink",
					__( "White", "ts_visual_composer_extend" )                          => "ts-simptip-style-white"
				),
				"description"			=> __( "Select the tooltip style.", "ts_visual_composer_extend" ),
				"group" 				=> "Tooltip Settings",
			),
			array(
				"type"				    => "dropdown",
				"class"				    => "",
				"heading"			    => __( "Tooltip Animation", "ts_visual_composer_extend" ),
				"param_name"		    => "tooltip_animation",
				"value"                 => array(
					__("Swing", "ts_visual_composer_extend")                    => "swing",
					__("Fall", "ts_visual_composer_extend")                 	=> "fall",
					__("Grow", "ts_visual_composer_extend")                 	=> "grow",
					__("Slide", "ts_visual_composer_extend")                 	=> "slide",
					__("Fade", "ts_visual_composer_extend")                 	=> "fade",
				),
				"description"		    => __( "Select how the tooltip entry and exit should be animated once triggered.", "ts_visual_composer_extend" ),
				"group"					=> "Tooltip Settings",
			),
			array(
				"type"					=> "nouislider",
				"heading"				=> __( "Tooltip X-Offset", "ts_visual_composer_extend" ),
				"param_name"			=> "tooltipster_offsetx",
				"value"					=> "0",
				"min"					=> "-100",
				"max"					=> "100",
				"step"					=> "1",
				"unit"					=> 'px',
				"description"			=> __( "Define an optional X-Offset for the tooltip position.", "ts_visual_composer_extend" ),
				"group" 				=> "Tooltip Settings",
			),
			array(
				"type"					=> "nouislider",
				"heading"				=> __( "Tooltip Y-Offset", "ts_visual_composer_extend" ),
				"param_name"			=> "tooltipster_offsety",
				"value"					=> "0",
				"min"					=> "-100",
				"max"					=> "100",
				"step"					=> "1",
				"unit"					=> 'px',
				"description"			=> __( "Define an optional Y-Offset for the tooltip position.", "ts_visual_composer_extend" ),
				"group" 				=> "Tooltip Settings",
			),
			// Other Settings
			array(
				"type"				    => "seperator",
				"param_name"		    => "seperator_7",
				"seperator"				=> "Other Settings",
				"group" 				=> "Other Settings",
			),
			array(
				"type"                  => "nouislider",
				"heading"               => __( "Margin: Top", "ts_visual_composer_extend" ),
				"param_name"            => "margin_top",
				"value"                 => "20",
				"min"                   => "0",
				"max"                   => "200",
				"step"                  => "1",
				"unit"                  => 'px',
				"description"           => __( "Select the top margin for the element.", "ts_visual_composer_extend" ),
				"group" 				=> "Other Settings",
			),
			array(
				"type"                  => "nouislider",
				"heading"               => __( "Margin: Bottom", "ts_visual_composer_extend" ),
				"param_name"            => "margin_bottom",
				"value"                 => "20",
				"min"                   => "0",
				"max"                   => "200",
				"step"                  => "1",
				"unit"                  => 'px',
				"description"           => __( "Select the bottom margin for the element.", "ts_visual_composer_extend" ),
				"group" 				=> "Other Settings",
			),
			array(
				"type"                  => "textfield",
				"heading"               => __( "Define ID Name", "ts_visual_composer_extend" ),
				"param_name"            => "el_id",
				"value"                 => "",
				"description"           => __( "Enter an unique ID for the element.", "ts_visual_composer_extend" ),
				"group" 				=> "Other Settings",
			),
			array(
				"type"                  => "tag_editor",
				"heading"           	=> __( "Extra Class Names", "ts_visual_composer_extend" ),
				"param_name"            => "el_class",
				"value"                 => "",
				"description"      		=> __( "Enter additional class names for the element.", "ts_visual_composer_extend" ),
				"group" 				=> "Other Settings",
			),
		)
	);
		
	if ($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_VisualComposer_LeanMap == "true") {
		return $VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_VisualComposer_Element;
	} else {			
		vc_map($VISUAL_COMPOSER_EXTENSIONS->TS_VCSC_VisualComposer_Element);
	}
?>